/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
import groovy.xml.XmlSlurper
import groovy.xml.slurpersupport.NodeChild

import java.util.stream.Stream
import java.util.stream.Collectors

mkdir "${rootDir}/plugins"

// The ‘file’ argument can be either a string or a file.
static Stream<Node> xmlChildren(file) {
    new XmlParser().parse(file).children().stream()
}

/*static Stream<File> subdirs(File dir) {
    def res = []
    dir.eachDir res.&add
    res.stream()
}*/

static Stream<File> subdirs(File dir) {
    def res = []
    dir.eachDir { res.add(it) }
    return res.stream()
}

boolean isComponentEnabled(File componentDir) {
    File componentFile = file(componentDir.toString() + '/ofbiz-component.xml')
    componentFile.exists() && new XmlParser().parse(componentFile)
                                             .with { it.@enabled in [null, 'true'] }
}

/*List<File> activeComponents() {
    println "Running activeComponents function..."
    println "${rootDir}/src/main/resources/org/sitenetsoft/sunseterp/framework/base/config/component-load.xml"
    println xmlChildren("${rootDir}/src/main/resources/org/sitenetsoft/sunseterp/framework/base/config/component-load.xml").collect(Collectors.toList())
    println "------------------------------------------"
    println xmlChildren("${rootDir}/src/main/resources/org/sitenetsoft/sunseterp/framework/base/config/component-load.xml")
            .map { dir ->
                // TODO: We need to add the path for documentation since it is now divorce from the source code
                // "${rootDir}/docs/org/sitenetsoft/sunseterp/" + dir.@'parent-directory'
                Stream.of("${rootDir}/src/main/resources/org/sitenetsoft/sunseterp/" + dir.@'parent-directory',
                        "${rootDir}/src/main/java/org/sitenetsoft/sunseterp/" + dir.@'parent-directory')
            }
            .flatMap { it }
            .flatMap({ dir ->
                File loader = file(dir + '/component-load.xml')
                if (loader.exists()) {
                    xmlChildren(loader).map { file dir + '/' + it.@'component-location' }
                } else {
                    subdirs file(dir)
                    //println(dir)
                }
            }).collect(Collectors.toList()).toString()

            //.collect(Collectors.toList()).toString()
    //.map { dir ->
            //    ["${rootDir}/src/main/resources/org/sitenetsoft/sunseterp/" + dir.@'parent-directory',
            //     "${rootDir}/src/main/java/org/sitenetsoft/sunseterp/" + dir.@'parent-directory']
            //}.toList().toString()

    //println xmlChildren("${rootDir}/src/main/resources/org/sitenetsoft/sunseterp/framework/base/config/component-load.xml")
    //        .map { "${rootDir}/" + it.@'parent-directory' + "/src/main/resources/org/sitenetsoft/sunseterp/" + it.@'parent-directory' }
    //        .toList().toString()
    println("==========================================")

    def result = xmlChildren("${rootDir}/src/main/resources/org/sitenetsoft/sunseterp/framework/base/config/component-load.xml")
        .map { "${rootDir}/" + it.@'parent-directory' }
        .flatMap({ dir ->
            File loader = file(dir + '/component-load.xml')
            if (loader.exists()) {
                xmlChildren(loader).map { file dir + '/' + it.@'component-location' }
            } else {
                subdirs file(dir)
            }
        })
            .peek { println "Component: $it" }
        .filter(this.&isComponentEnabled)
            .peek { println "Enabled component: $it" }
        .collect(Collectors.toList()) + file("${rootDir}/src/main/resources/org/sitenetsoft/sunseterp/framework/start")
    println "Result: $result"
    return result
}*/

/*List<File> activeComponents() {
    xmlChildren("${rootDir}/src/main/resources/org/sitenetsoft/sunseterp/framework/base/config/component-load.xml")
            //.map { "${rootDir}/" + it.@'parent-directory' }
            .map { dir ->
                Stream.of("${rootDir}/src/main/resources/org/sitenetsoft/sunseterp/" + dir.@'parent-directory',
                        "${rootDir}/src/main/java/org/sitenetsoft/sunseterp/" + dir.@'parent-directory',
                        "${rootDir}/docs/asciidoc/org/sitenetsoft/sunseterp/" + dir.@'parent-directory')
            }
            .peek{ println "Directories: " + it }
            .flatMap({ dir ->
                File loader = file(dir + '/component-load.xml')
                println "loader: " + dir
                xmlChildren(loader).map {
                    println "component: " + dir
                    file dir + '/' + it.@'component-location'
                }*/
                /*File loader = file(dir + '/component-load.xml')
                println "------------------------"
                if (loader.exists()) {
                    println "loader: " + dir
                    xmlChildren(loader).map { file dir + '/' + it.@'component-location' }
                } else {*/
                    //println "subdirs: " + dir
                    //subdirs file(dir)
                //}
            /*})
            .filter(this.&isComponentEnabled)
            .collect(Collectors.toList()) + file("${rootDir}/src/main/resources/org/sitenetsoft/sunseterp/framework/start")
}*/

List<File> activeComponents() {
    List<File> components = xmlChildren("${rootDir}/src/main/resources/org/sitenetsoft/sunseterp/framework/base/config/component-load.xml")
            .collect { dir ->
                // Create a list of directories based on the XML configuration
                [
                        "${rootDir}/src/main/resources/org/sitenetsoft/sunseterp/" + dir.@'parent-directory',
                        "${rootDir}/src/main/java/org/sitenetsoft/sunseterp/" + dir.@'parent-directory',
                        "${rootDir}/docs/asciidoc/org/sitenetsoft/sunseterp/" + dir.@'parent-directory'
                ]
            }
            .flatten() // Flatten the nested lists into a single list
            .collect { String path -> new File(path) } // Convert paths to File objects
            .findAll { it.exists() && it.isDirectory() } // Filter for existing directories
            .collectMany { dir ->
                // Process each directory to find component configurations
                File loader = new File(dir, 'component-load.xml')
                if (loader.exists()) {
                    xmlChildren(loader).collect { node ->
                        new File(dir, node.@'component-location')
                    }
                } else {
                    subdirs(dir).collect(Collectors.toList())
                }
            }
            .findAll(this.&isComponentEnabled) // Filter for enabled components
            .toList()

    //println "Directories and components processed: $components"
    return components + new File("${rootDir}/src/main/resources/org/sitenetsoft/sunseterp/framework/start")
}

ext {
    xmlChildren = this.&xmlChildren
    subdirs = this.&subdirs
    activeComponents = this.&activeComponents.memoize()
    isComponentEnabled = this.&isComponentEnabled.memoize()
}
