#####################################################################
# Licensed to SiteNetSoft + SunsetERP (SNS+SERP) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The SNS+SERP licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#####################################################################

# Basic
quarkus.http.port=8082
quarkus.http.ssl-port=8442
quarkus.http.test-ssl-port=8445
quarkus.http.host=localhost
quarkus.banner.path=banner.txt
#quarkus.log.level=DEBUG
quarkus.profile=dev

# Test
quarkus.http.test-timeout=120s

# Security
#quarkus.oidc.token.refresh-expired=true # cannot be used if not web app (I don't get it)
#quarkus.oidc.authentication.session-age-extension=3600
#quarkus.security.users.embedded.enabled=true
#quarkus.security.users.embedded.plain-text=true
#quarkus.security.users.embedded.users-file=auth/users.properties
#quarkus.security.users.embedded.roles-file=auth/roles.properties
#quarkus.http.auth.form.enabled=true

quarkus.http.ssl.certificate.files=../../../../config/cert.pem
quarkus.http.ssl.certificate.key-files=../../../../config/key.pem

# CORS
quarkus.http.cors=false
quarkus.http.cors.origins=http://localhost:8082,http://localhost:8080,https://localhost:8442,https://localhost:8445,https://localhost:8543,https://localhost:8443
quarkus.http.cors.methods=GET,POST,PUT,DELETE,HEAD,OPTIONS,PATCH
quarkus.http.cors.headers=Content-Type,Authorization,X-Custom-Header
quarkus.http.cors.exposed-headers=Content-Disposition
quarkus.http.cors.access-control-max-age=1H
quarkus.http.cors.access-control-allow-credentials=true

# OpenAPI
quarkus.smallrye-openapi.always-include=true

# OIDC Configuration
#quarkus.oidc.enabled=true
%prod.quarkus.oidc.auth-server-url=https://localhost:8543/realms/SunsetERP
quarkus.oidc.auth-server-url=https://localhost:8543/realms/SunsetERP
quarkus.oidc.client-id=${SUNSETERP_OIDC_CLIENT_ID}
quarkus.oidc.credentials.secret=${SUNSETERP_OIDC_CREDENTIALS_SECRET}
#quarkus.oidc.client-id=${SUNSETERP_OIDC_CLIENT_ID}
#quarkus.oidc.credentials.secret=${SUNSETERP_OIDC_CREDENTIALS_SECRET}
#quarkus.oidc.client-id=backend-service
#quarkus.oidc.credentials.secret=secret
quarkus.oidc.tls.verification=none
#quarkus.oidc.authentication.cookie-domain=localhost
quarkus.http.auth.permission.authenticated.paths=/*
quarkus.http.auth.permission.authenticated.policy=authenticated
quarkus.oidc.roles.source=accesstoken

# Came from: https://github.com/quarkusio/quarkus/issues/30208
quarkus.oidc.authentication.user-info-required=true
quarkus.oidc.token.refresh-expired=true
quarkus.oidc.token.refresh-token-time-skew=30S

# Recommendation coming from debug logs
# Session cookie length for the tenant Default is greater than 4096 bytes. The cookie will be split to chunks to avoid browsers ignoring it. Alternative recommendations: 1. Set 'quarkus.oidc.token-state-manager.split-tokens=true' to have the ID, access and refresh tokens stored in separate cookies. 2. Set 'quarkus.oidc.token-state-manager.strategy=id-refresh-tokens' if you do not need to use the access token as a source of roles or to request UserInfo or propagate it to the downstream services. 3. Decrease the session cookie's length by disabling its encryption with 'quarkus.oidc.token-state-manager.encryption-required=false' but only if it is considered to be safe in your application's network. 4. Register a custom 'quarkus.oidc.TokenStateManager' CDI bean with the alternative priority set to 1.
# q_session_chunk_1 cookie 'max-age' parameter is set to 600 seconds. It is recommended to set it to the same value as the 'quarkus.oidc.authentication.session-age' parameter.
quarkus.oidc.token-state-manager.split-tokens=true
#quarkus.oidc.token-state-manager.strategy=id-refresh-tokens

# Enable Policy Enforcement
quarkus.keycloak.policy-enforcer.enable=true
quarkus.keycloak.policy-enforcer.lazy-load-paths=false

# Tell Dev Services for Keycloak to import the realm file
# This property is not effective when running the application in JVM or native modes
#quarkus.keycloak.devservices.realm-path=quarkus-realm.json

quarkus.oidc.token.issuer=any

quarkus.keycloak.policy-enforcer.paths.1.path=/api/public
quarkus.keycloak.policy-enforcer.paths.1.enforcement-mode=DISABLED

# Application Type (default is 'web-app', other options: 'service', 'bearer-only', etc.)
quarkus.oidc.application-type=web-app

#quarkus.keycloak.policy-enforcer.paths.2.path=/q/dev
#quarkus.keycloak.policy-enforcer.paths.2.enforcement-mode=DISABLED

#quarkus.keycloak.policy-enforcer.paths.3.path=/q/dev/*
#quarkus.keycloak.policy-enforcer.paths.3.enforcement-mode=DISABLED

#quarkus.http.auth.permission.dev-ui.paths=/q/dev/*
#quarkus.http.auth.permission.dev-ui.policy=authenticated

# Template Qute
#quarkus.qute.locations=org/sitenetsoft/sunseterp

# SunsetERP Configurations

# taxware is a third party commercial library
# TODO: Make this work with Quarkus. Maybe a separate microservice?
#taxware.enabled=false

# Tracing
#quarkus.opentelemetry.exporter.otlp.endpoint=http://localhost:14250

# PostgresSQL
# https://quarkus.io/guides/reactive-sql-clients
#quarkus.datasource.db-kind=postgresql
#quarkus.datasource.username=quarkus_test
#quarkus.datasource.password=quarkus_test
#quarkus.datasource.reactive.url=postgresql://localhost:5432/quarkus_test